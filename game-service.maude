mod SERVICE is
	inc CONFIGURATION .
	inc QID .
  pr NAT .

  sorts Key Value .
  subsort Qid < Key .
  subsorts Qid Msg < Value .

  sorts GAME GAMESet .
  subsorts Oid < GAME < GAMESet .

  ops A B : -> Oid [ctor] .

  op empty : -> GAMESet [ctor] .
  op _;_ : GAMESet GAMESet -> GAMESet [ctor assoc comm id: empty] .

  op Service : -> Cid [ctor] .

  op Game    :     -> Cid [ctor] .
  op id:_   : Nat -> Attribute [ctor gather (&)] .
  op name:_ : Qid -> Attribute [ctor gather (&)] .

  op _send_#_ : Oid Oid Msg -> Msg [ctor] .
  op _receive_ : Oid Msg -> Msg [ctor] .
  ops get_ delete_ : Nat -> Msg [ctor frozen] .
  ops put__ post__ : Nat Qid -> Msg [ctor frozen] .
  ops put_ post_ : Oid -> Msg [ctor frozen] .

  ops _get_ _delete_ : Oid Nat -> Msg [ctor frozen] .
  ops _put__ _post__ : Oid Nat Qid -> Msg [ctor frozen] .
endm

mod A-B-CONTRACT is
  ex SERVICE .

  var M : Msg .
  var N : Nat .
  var Q : Qid .
  var GS : GAMESet .
  var G : Oid .

  crl [GET] :
      < G : Game | id: N , name: Q >
      < A : Service >
      < B : Service | >
      A send B # get N
    =>
      B receive (A get N)
    if
      N > 0 .

  crl [PUT] :
      < A : Service >
      < B : Service | >
      A send B # (put N Q)
    =>
      B receive (A put N Q)
    if
      N > 0 .

  crl [POST] :
      < A : Service >
      < B : Service | >
      A send B # (post N Q)
    =>
      B receive (A post N Q)
    if
      N > 0 .

  crl [DELETE] :
      < A : Service >
      < B : Service | >
      A send B # delete N
    =>
      B receive (A delete N)
    if
      N > 0 .
endm

mod SERVICE-B is
	ex SERVICE .

  op games:_ : GAMESet -> Attribute [ctor gather(&)] .
  op put_in_ : GAME GAMESet -> GAMESet .

  var GS      : GAMESet .
  vars G G' S : Oid .
  var I       : Nat .
  var N N'    : Qid .

  rl [GET] :
      < G : Game | id : I , name : N >
      < B : Service | games : GS ; G >
      S send B # get I
    =>
      < B : Service | games : GS ; G >
      S receive N .

  rl [PUT] :
      < G : Game | id : I , name : N >
      < B : Service | games : GS >
      S send B # put G
    =>
      < B : Service | games : put G in GS >
      S receive 'OK .

  rl [UPDATE] :
      < G : Game | id : I , name : N >
      < G' : Game | id : I , name : N' >
      put G in (GS ; G')
    =>
      GS ; G .

  rl [PUT-NEW] :
      < G : Game | id : I , name : N >
      put G in GS
    =>
      GS ; G .

  rl [POST] :
      < G : Game | id : I , name : N >
      < B : Service | games : GS >
      (S send B # (post G))
    =>
      < B : Service | games : put G in GS > .

  rl [DELETE] :
      < G : Game | id : I , name : N >
      < B : Service | games : GS ; G >
      (S send B # delete I)
    =>
      < B : Service | games : GS > .
endm

mod SERVICE-A is
  ex SERVICE-B .

  var N : Nat .
  var Q : Qid .
  var GS : GAMESet .

  rl [GET] :
      < A : Service >
      < B : Service | >
      get N
    =>
      < A : Service >
      < B : Service | >
      A send B # get N .

  rl [RECEIVE] :
      < A : Service >
      < B : Service | >
      A receive Q
    =>
      < A : Service >
      < B : Service | >
      Q .

  rl [PUT] :
      < A : Service >
      < B : Service | >
      put N Q
    =>
      < A : Service >
      < B : Service | >
      A send B # (put N Q) .

  rl [POST] :
      < A : Service >
      < B : Service | >
      post N Q
    =>
      < A : Service >
      < B : Service | >
      A send B # (post N Q) .

  rl [DELETE] :
      < A : Service >
      < B : Service | >
      delete N
    =>
      < A : Service >
      < B : Service | >
      A send B # delete N .
endm

---(
Service A -- has a game DB, can read and write from/to DB
Service B -- gets request from user, sends message to Service A to perform request
)---