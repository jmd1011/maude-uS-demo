mod SERVICE is
  inc CONFIGURATION .
  inc QID .
  pr NAT .

  ops OK FAIL : -> Msg [ctor] .

  sorts Key Value .
  subsort Qid < Key .
  subsorts Qid Msg < Value .

  op Service : -> Cid [ctor] .  
  ops A B : -> Oid [ctor] .

  sorts GAME GAMESet .
  subsorts Oid < GAME < GAMESet .

  op empty : -> GAMESet [ctor] .
  op _;_ : GAMESet GAMESet -> GAMESet [ctor assoc comm id: empty] .

  op Game    :     -> Cid [ctor] .
  op id :_   : Nat -> Attribute [ctor gather (&)] .
  op name :_ : Qid -> Attribute [ctor gather (&)] .

  op games :_ : GAMESet -> Attribute [ctor gather(&)] .

  **********************
  ***CONSOLE COMMANDS***
  **********************
  ops get_ delete_ : Nat -> Msg [ctor frozen] .
  ops put__ post__ : Nat Qid -> Msg [ctor frozen] .

  **********************
  ***SERVICE COMMANDS***
  **********************
  op _send_#_      : Oid Oid Msg -> Msg [ctor] .
  op _receive_     : Oid Msg -> Msg [ctor frozen] .
  ops _get_ _delete_ : Oid Nat -> Msg [ctor frozen] .
  ops _put__ _post__ : Oid Nat Qid -> Msg [ctor frozen] .
  ops put_ post_ : Oid -> Msg [ctor frozen] .
endm

mod SERVICE-B is
  ex SERVICE .

  var GS      : GAMESet .
  vars G G' S : Oid .
  var I       : Nat .
  var N N'    : Qid .
  var AS      : AttributeSet .

  rl [GET] :
      < G : Game | id : I , name : N >
      < S : Service | AS >
      < B : Service | games : G ; GS >
      S send B # get I
    =>
      < G : Game | id : I , name : N >
      < S : Service | games : G >
      < B : Service | games : G ; GS >
      S receive OK .

  rl [PUT] :
      < G : Game | id : I , name : N >
      < S : Service | AS >
      < B : Service | games : GS >
      S send B # put G
    =>
      < S : Service | AS >
      < B : Service | games : G ; GS >
      S receive OK .

  rl [POST] :
      < G : Game | id : I , name : N >
      < S : Service | AS >
      < B : Service | games : GS >
      (S send B # (post G))
    =>
      < G : Game | id : I , name : N >
      < S : Service | AS >
      < B : Service | games : G ; GS >
      S receive OK .

  rl [DELETE] :
      < G : Game | id : I , name : N >
      < S : Service | AS >
      < B : Service | games : GS ; G >
      (S send B # delete I)
    =>
      < S : Service | AS >
      < B : Service | games : GS >
      S receive OK .
endm

mod SERVICE-A is
  ex SERVICE .

  var N : Nat .
  var Q : Qid .
  var AS AS' : AttributeSet .
  var M : Msg .

  rl [GET] :
      < A : Service | AS >
      < B : Service | AS' >
      get N
    =>
      < A : Service | AS >
      < B : Service | AS' >
      A send B # get N .

  rl [RECEIVE] :
      < A : Service | AS >
      < B : Service | AS' >
      A receive M
    =>
      < A : Service | AS >
      < B : Service | AS' >
      M .

  rl [PUT] :
      < A : Service | AS >
      < B : Service | AS' >
      put N Q
    =>
      < A : Service | AS >
      < B : Service | AS' >
      A send B # (put N Q) .

  rl [POST] :
      < A : Service | AS >
      < B : Service | AS' >
      post N Q
    =>
      < A : Service | AS >
      < B : Service | AS' >
      A send B # (post N Q) .

  rl [DELETE] :
      < A : Service | AS >
      < B : Service | AS' >
      delete N
    =>
      < A : Service | AS >
      < B : Service | AS' >
      A send B # delete N .
endm

mod A-B-CONTRACT is
  ex SERVICE-A .
  ex SERVICE-B .

  var M : Msg .
  var N : Nat .
  var Q : Qid .
  var GS GS' : GAMESet .
  vars G G' : Oid .
  vars AS AS' : AttributeSet .

  rl [GET-FAIL] : 
    < A : Service | games : empty >
    < B : Service | games : empty >
    A send B # get 0
  =>
    < A : Service | games : empty >
    < B : Service | games : empty >
    B send A # get 0  .

  rl [PUT-FAIL] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # (put 0 Q)
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A receive FAIL .

  rl [POST-FAIL] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # (post 0 Q)
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A receive FAIL .

  rl [DELETE-FAIL] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # delete 0
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A receive FAIL .

  crl [GET-OK] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # get N
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      B receive (A get N)
    if
      N > 0 .

  crl [PUT-OK] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # (put N Q)
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      B receive (A put N Q)
    if
      N > 0 .

  crl [POST-OK] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # (post N Q)
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      B receive (A post N Q)
    if
      N > 0 .

  crl [DELETE-OK] :
      < A : Service | games : GS' >
      < B : Service | games : GS >
      A send B # delete N
    =>
      < A : Service | games : GS' >
      < B : Service | games : GS >
      B receive (A delete N)
    if
      N > 0 .
endm

mod TEST-SERVICE is
  ---ex SERVICE-A .
  ---ex SERVICE-B .
  ex SERVICE .

  sort Status .
  ops stable failed : -> Status .
  subsort Status < Msg .

  op initConfig : -> Configuration .
  ops G G' : -> Oid .

  eq initConfig =
    stable
    < G : Game | id : 1 , name : 'Mario >
    < G' : Game | id : 2 , name : 'Mario2 >
    < A : Service | games : empty >
    < B : Service | games : (G ; G') > .

  var G'' : Oid .
  vars GS GS' : GAMESet .
  var N : Nat .
  var Q : Qid .

  crl [GET] :
      stable
      < A : Service | games : GS >
      < B : Service | games : G ; GS' >
      < G : Game | id : N , name : Q >
      get N
    =>
      stable
      < A : Service | games : G ; GS >
      < B : Service | games : G ; GS' >
      < G : Game | id : N , name : Q >
    if
      N > 0 .

  rl [GET-ZERO] :
      stable
      C:Configuration
      get 0
    =>
      failed
      C:Configuration .

  crl [UPDATE] :
      stable
      < A : Service | games : GS >
      < B : Service | games : G ; GS' >
      < G : Game | id : N , name : Q >
      put N Q':Qid
    =>
      stable
      < A : Service | games : GS >
      < B : Service | games : G ; GS' >
      < G : Game | id : N , name : Q':Qid >
    if
      N > 0 .

  rl [UPDATE-ZERO] :
      stable
      C:Configuration
      put 0 Q
    =>
      failed
      C:Configuration .

  crl [PUT] :
      stable
      < A : Service | games : GS >
      < B : Service | games : GS' >
      < G'' : Game | id : N , name : Q >
      put G''
    =>
      stable
      < A : Service | games : GS >
      < B : Service | games : G'' ; GS' >
      < G'' : Game | id : N , name : Q >
    if
      N > 0 .

  rl [PUT-ZERO] :
      stable
      C:Configuration
      < G'' : Game | id : 0 , name : Q >
      put G''
    => 
      failed
      C:Configuration .

  crl [DELETE] :
      stable
      < A : Service | games : GS >
      < B : Service | games : G ; GS' >
      < G : Game | id : N , name : Q >
      delete N
    =>
      stable
      < A : Service | games : GS >
      < B : Service | games : GS' >
    if
      N > 0 .

  rl [DELETE-ZERO] :
      stable
      C:Configuration
      delete 0
    =>
      failed
      C:Configuration .

  rl [POST] :
      stable
      C:Configuration
      post G''
    =>
      stable
      C:Configuration
      put G'' .
endm
